{
  
    
        "post0": {
            "title": "Guide To Making A New Repo",
            "content": "Duplicate APCSP, and use it as template for your own repo . | . Name your repo and include all branches before clicking the green create button. . | . If you have an automatically generated pull request, then go ahead and follow the instructions on there. If there is no pull request, as shown below, then move on to step 4. . | . Navigate to this link. Select: RSA and 4096 and leave Passphrase blank. Click the blue button Generate-SSH-Keys. You have just created an ssh key-pair. . | . Navigate to this link. Replace the section of the link highlighted in blue with your repository name. In the picture, I have inputted “ourshiny,” because it is my repository name. Replace the section of the link highlighted in yellow with your repository name that you just made. . | https://github.com/yourgithubname/yourrepositoryname/settings/secrets/actions . . Click New repository secret. Copy and paste the Private Key (generated in step 4) into the Value field. This includes the “—BEGIN RSA PRIVATE KEY—” and “–END RSA PRIVATE KEY—” portions. In the Name field, name the secret SSH_DEPLOY_KEY. Once done, click the green Add Secret button. . | . Navigate to this link, then replace the portions below with your github and repository names. My github name in the image below is jiya-sav, and my repository name is ourshiny. . | https://github.com/yourgithubname/yourrepositoryname/settings/keys . . Click the Add deploy key button. Paste your Public Key (generated in step 4) into the Key box. In the Title, name the key anything you want, for example fastpages-key. Finally, make sure you click the checkbox next to Allow write access (pictured below), and click the green Add key button to save the key. . | . . GitHub Actions will build your site, which will take 2-3 minutes to complete. This will happen anytime you push changes to the master branch of your repository. You can monitor the logs of this if you like on the Actions tab of your repo. . | Your GH-Pages Status badge on your README will eventually appear and be green, indicating your first successful build. . You can monitor the status of your site in the GitHub Pages section of your repository settings. . Now that you have made your repository secure, you can clone it into vscode and CODE, CODE, CODE!!! .",
            "url": "https://jiya-sav.github.io/ourshiny/2023/04/30/Guide-to-making-a-new-repo.html",
            "relUrl": "/2023/04/30/Guide-to-making-a-new-repo.html",
            "date": " • Apr 30, 2023"
        }
        
    
  
    
        ,"post1": {
            "title": "Frontend and Backend Development with Big Idea 1 Review",
            "content": "Installing Scripts Lesson . For Windows . After you&#39;ve installed VSCode using WSL, install Anaconda on WSL. . Anaconda is like a big tool box for your computer, it has tools and libraries that you might need for data analysis, programming, and computing. Anaconda Python packages include pandas, numpy, sqlite, jupyter, bash, and other kernels. Conda is a tool that helps you manage these tools inside Anaconda. It lets you install, update, delete, and organize packages and materials. Conda script tells Conda what tools and materials you need and how to install them in your Anaconda toolbox. . . Type these commands in powershell or terminal . PS C: Users UserName&gt; wsl # Windows prompt to WSL command $ cd /tmp # used to store temporary files $ wget https://repo.anaconda.com/archive/Anaconda3-2023.03-Linux-x86_64.sh # downloadable file $ chmod +x Anaconda3-2022.05-Linux-x86_64.sh # chmod (change mode command) changes permissions for a file or directory # Answer yes to all the prompts $ ./Anaconda3-2022.05-Linux-x86_64.sh . Start a new WSL Command or Powershell. Now the WSL prompt should be prefixed with (base) from Anaconda install. If not, go back to Anaconda install. The base prefix indicates that you are running inside the conda/anaconda environment. The command &quot;conda deactivate&quot; should bring you back. . PS C: Users ShayM&gt; wsl # Windows prompt (base) shay@MSI:/mnt/c/Users/ShayM$ cd ~ # WSL prompt (base) shay@MSI:~$ # WSL home, best place to install files # you can check your conda versions (base) id:~$ conda --version . . For MacOS . Python2 install on MacOS . Install Python2&gt; VSCode install on MacOS. | Install VSCode&gt; Anaconda install on MacOS. | Download for MacOS:Anaconda- Run Install: Answer yes to questions Homebrew install on MacOS | Homebrew is a tool that helps you easily install and manage software on your Mac. Think of it like a virtual store for your computer where you can browse, download and install a variety of useful programs and tools. | Copy and Paste to Install from Terminal Homebrew - Copy bash ... curl ... command using copy box on website Launch terminal from search bar | Paste bash ... curl ... command into Terminal ... | Make sure command starts, this should provide feedback/output in terminal and could take a long time, like 10-min, there could be a prompt in the middle, at about 5-minutes. Follow any on screen instructions provided in terminal output to finish. | . | Homebrew installs a tool called &quot;brew&quot; which helps add and manage developer packages on MacOS. | . Start a new WSL terminal. Now the terminal prompt should be prefixed with (base) from Anaconda install. If not, go back to Anaconda install. . Having Homebrew and Anaconda allows you to easily install Key Packages needed on MacOS like the commands below are all neccessary:bash$ brew list # list packages $ brew update # update package list $ brew upgrade # upgrade packages $ brew install git # install latest git $ brew install python # install python3 for development $ python --version # version of python3 installed $ brew install java # openjdk install . Hacks: Screen shot that you have conda installed | . Setting up GitHub Pages with FastPages Features . All of you have created your own repository before at the beginning of the year, but some things have changed in the process. . Duplicate APCSP, and use it as template for your own repo | . Name your repo and include all branches before clicking the green create button. | . If you have an automatically generated pull request, then go ahead and follow the instructions on there. If there is no pull request, as shown below, then move on to step 4. | . Navigate to this link. Select: RSA and 4096 and leave Passphrase blank. Click the blue button Generate-SSH-Keys. You have just created an ssh key-pair. | . Navigate to this link. Replace the section of the link &quot;yourrepositoryname&quot; with your repository name. In the picture, I have inputted “ourshiny,” because it is my repository name. Replace the section of the link &quot;yourgithubname&quot; with your repository name that you just made. https://github.com/yourgithubname/yourrepositoryname/settings/secrets/actions | . Click New repository secret. Copy and paste the Private Key (generated in step 4) into the Value field. This includes the &quot;BEGIN RSA PRIVATE KEY&quot; and &quot;--END RSA PRIVATE KEY&quot; portions. In the Name field, name the secret SSH_DEPLOY_KEY. Once done, click the green Add Secret button. | . Navigate to this link, then replace the portions below with your github and repository names. My github name in the image below is jiya-sav, and my repository name is ourshiny. https://github.com/yourgithubname/yourrepositoryname/settings/keys | . Click the Add deploy key button. Paste your Public Key (generated in step 4) into the Key box. In the Title, name the key anything you want, for example fastpages-key. Finally, make sure you click the checkbox next to Allow write access (pictured below), and click the green Add key button to save the key. | . . GitHub Actions will build your site, which will take 2-3 minutes to complete. This will happen anytime you push changes to the master branch of your repository. You can monitor the logs of this if you like on the Actions tab of your repo. Your GH-Pages Status badge on your README will eventually appear and be green, indicating your first successful build. You can monitor the status of your site in the GitHub Pages section of your repository settings. | Now that you have made your repository secure, you can clone it into vscode and CODE, CODE, CODE!!! . How to Make a Pull Request . After you&#39;ve cloned a repository and made changes to it, go to pull requests in your Github repository . | Once you click &#39;create new pull request,&#39; you should see this with your new changes: . | Change the title and send the pull request . | Hacks: You will be turning in all your hacks as a pull request. Title the pull request as shown in the third step but with your own name. Any other titles will not be accepted. | . Fetching . The Basics . Fetching means getting data from somewhere else, like a website or database. | . JavaScript is a programming language that can be used to fetch data from a website or database. . When you fetch data with JavaScript, you first need to tell it where to get the data from. This is called the URL. | Once you know the URL, you can use JavaScript to go and get the data from that URL. | When the data comes back, it&#39;s usually in a format like text or JSON. This means that you might need to do some additional work to turn the data into something that your website or application can use. | Once you have the data, you can use JavaScript to display it on your website or application. You can put it in a table, show it on a map, or do anything else you can think of. | . . About Fetching . Method . The fetching methods are in line with the CRUD (Create, Read, Update, Delete), and list as follows: . &quot;GET&quot;: Probably the most common method you would use, which is in line with &quot;read&quot;. It essentially &quot;gets&quot; the information from the API and brings it to the frontend where you are able to display it and read it. | &quot;POST&quot;: Lines up with &quot;create&quot; and adds a resource to the API. You will probably mostly be using this with your own API or if a website adds your input to an API. | &quot;PUT&quot; and &quot;PATCH&quot;: Essentially the &quot;update&quot; for API. Use &quot;PUT&quot; if you want to change the whole resource, or &quot;PATCH&quot; if you want to change just one part of a resource. | &quot;DELETE&quot;: Exactly how it sounds, deletes a resource from the API | . Popcorn Hacks: . What method should I use if I want to display some of the data stored in the backend? GET (read) | . | What method would I use if something in the data is misspelled and I want to fix it real quick? PUT (patch) | . | What method should I use if I want to add a new entry to the data? Post (create) | . | . Filtering Data . If we want to display API data, we are going to have to filter what we want to display for multiple reasons These include making sure that the user only sees information they need to see, and not anything else | Also we need to present the information in a readable format instead of just seeing the raw data | . | . The below code segment, is from a previous project. It shows the use of a url being fetched, and the JavaScript fetch() command being implemented. . // prepare fetch urls // const url = &quot;https://ssjn.nighthawkcodescrums.gq/api/song&quot;; const url = &quot;https://ssjncpt.duckdns.org/api/song&quot;; const sad_url = url + &quot;/sad/&quot;; // sad category const happy_url = url + &quot;/happy/&quot;; // happy category const rage_url = url + &quot;/rage/&quot;; // rage category const indian_url = url + &quot;/indian/&quot;; // indian category // prepare fetch GET options const options = { method: &#39;GET&#39;, // *GET, POST, PUT, DELETE, etc. mode: &#39;cors&#39;, // cors, *cors, same-origin cache: &#39;default&#39;, // *default, no-cache, reload, force-cache, only-if-cached credentials: &#39;omit&#39;, // include, *same-origin, omit headers: { &#39;Content-Type&#39;: &#39;application/json&#39; // &#39;Content-Type&#39;: &#39;application/x-www-form-urlencoded&#39;, }, }; // prepare fetch PUT options, clones with JS Spread Operator (...) const put_options = {...options, method: &#39;PUT&#39;}; // clones and replaces method // fetch the API fetch(url, options) // response is a RESTful &quot;promise&quot; on any successful fetch .then(response =&gt; { // check for response errors if (response.status !== 200) { error(&#39;GET API response failure: &#39; + response.status); return; } // valid response will have JSON data . Third Party APIs . APIs provided by other developers for public use. . | Programmers can use the content of these APIs to create new functionalities for their programs, or they can also simply take advantage of the data of the API for different uses. . Ex: A developed can use Google Account login to allow users to log in with their google account . | Ex: Using the content of a weather API to make a weather app . | . | The functionalities of these APIs are usually accessed via JavaScript (usually) as you’ve seen before in your past projects. . | 3rd party APIs are located on third party servers. To access them from JavaScript you first need to connect to the API functionality and make it available on your page. . | . &lt;script src=&quot;https://api.mqcdn.com/sdk/mapquest-js/v1.3.2/mapquest.js&quot; defer&gt;&lt;/script&gt; &lt;link rel=&quot;stylesheet&quot; href=&quot;https://api.mqcdn.com/sdk/mapquest-js/v1.3.2/mapquest.css&quot; /&gt; . Here is an example of accessing the objects available in the library above. | . const map = L.mapquest.map(&#39;map&#39;, { center: [53.480759, -2.242631], layers: L.mapquest.tileLayer(&#39;map&#39;), zoom: 12 }); . The process of accessing and using third-party APIs can vary depending on the specific API and the requirements set by the API provider. 3rd party APIs use developer keys to allow developers access to the API functionality, which protects the owner of the API. | . L.mapquest.key = &#39;YOUR-API-KEY-HERE&#39;; . Developers must apply to get the key of a certain API, and then include it in their code to be allowed access to the API&#39;s functionality. Some API keys are accessed slightly differently, but the method is similar for the most part. | . Put the link of a 3rd party API you have or will use below? . Pandas . While 3rd party APIs give you access to a plethora of data you may have not been able to include using a completely new self-made database, pandas can help you organize and utlize this data. . Pandas is an open-source library that allows for the manipulation and analysis of numerical data, which is vital in real-life applications. . We have used this in the song recommendation program we are currently developing. The use of pandas allows us to take the csv file we obtained from a third party and display it in a format we can manipulate and analyze. . import os import pandas as pd from flask import render_template @app.route(&#39;/songdata&#39;) def songdata(): # Path to the CSV file csv_path = os.path.join(app.static_folder, &#39;songdata.csv&#39;) # Read the CSV file into a pandas dataframe df = pd.read_csv(csv_path) # Render the dataframe as an HTML table using Jinja2 return render_template(&#39;songdata.html&#39;, table=df.to_html(index=False)) . This is how the dataframe will appear on our flask: . . Python (Request) Fetch . Example with Weather API . What method is being used in these cells? | . import requests url = &quot;https://yahoo-weather5.p.rapidapi.com/weather&quot; querystring = {&quot;location&quot;:&quot;San Diego&quot;,&quot;format&quot;:&quot;json&quot;,&quot;u&quot;:&quot;f&quot;} headers = { &quot;X-RapidAPI-Key&quot;: &quot;4abcb54450msh7468dfd72294e89p18fbaajsn6d4200063b39&quot;, &quot;X-RapidAPI-Host&quot;: &quot;yahoo-weather5.p.rapidapi.com&quot; } response = requests.request(&quot;GET&quot;, url, headers=headers, params=querystring) print(response.json()) . {&#39;location&#39;: {&#39;city&#39;: &#39;San Diego&#39;, &#39;woeid&#39;: 2487889, &#39;country&#39;: &#39;United States&#39;, &#39;lat&#39;: 32.831699, &#39;long&#39;: -117.122002, &#39;timezone_id&#39;: &#39;America/Los_Angeles&#39;}, &#39;current_observation&#39;: {&#39;pubDate&#39;: 1682463385, &#39;wind&#39;: {&#39;chill&#39;: 64, &#39;direction&#39;: &#39;WSW&#39;, &#39;speed&#39;: 9}, &#39;atmosphere&#39;: {&#39;humidity&#39;: 65, &#39;visibility&#39;: 10, &#39;pressure&#39;: 1012.5}, &#39;astronomy&#39;: {&#39;sunrise&#39;: &#39;6:08 AM&#39;, &#39;sunset&#39;: &#39;7:26 PM&#39;}, &#39;condition&#39;: {&#39;temperature&#39;: 65, &#39;text&#39;: &#39;Mostly Cloudy&#39;, &#39;code&#39;: 28}}, &#39;forecasts&#39;: [{&#39;day&#39;: &#39;Tue&#39;, &#39;date&#39;: 1682438400, &#39;high&#39;: 67, &#39;low&#39;: 55, &#39;text&#39;: &#39;Mostly Clear&#39;, &#39;code&#39;: 33}, {&#39;day&#39;: &#39;Wed&#39;, &#39;date&#39;: 1682524800, &#39;high&#39;: 73, &#39;low&#39;: 56, &#39;text&#39;: &#39;Partly Cloudy&#39;, &#39;code&#39;: 30}, {&#39;day&#39;: &#39;Thu&#39;, &#39;date&#39;: 1682611200, &#39;high&#39;: 76, &#39;low&#39;: 57, &#39;text&#39;: &#39;Mostly Sunny&#39;, &#39;code&#39;: 34}, {&#39;day&#39;: &#39;Fri&#39;, &#39;date&#39;: 1682697600, &#39;high&#39;: 76, &#39;low&#39;: 58, &#39;text&#39;: &#39;Mostly Sunny&#39;, &#39;code&#39;: 34}, {&#39;day&#39;: &#39;Sat&#39;, &#39;date&#39;: 1682784000, &#39;high&#39;: 77, &#39;low&#39;: 59, &#39;text&#39;: &#39;Partly Cloudy&#39;, &#39;code&#39;: 30}, {&#39;day&#39;: &#39;Sun&#39;, &#39;date&#39;: 1682870400, &#39;high&#39;: 75, &#39;low&#39;: 59, &#39;text&#39;: &#39;Partly Cloudy&#39;, &#39;code&#39;: 30}, {&#39;day&#39;: &#39;Mon&#39;, &#39;date&#39;: 1682956800, &#39;high&#39;: 64, &#39;low&#39;: 54, &#39;text&#39;: &#39;Cloudy&#39;, &#39;code&#39;: 26}, {&#39;day&#39;: &#39;Tue&#39;, &#39;date&#39;: 1683043200, &#39;high&#39;: 62, &#39;low&#39;: 52, &#39;text&#39;: &#39;Mostly Cloudy&#39;, &#39;code&#39;: 28}, {&#39;day&#39;: &#39;Wed&#39;, &#39;date&#39;: 1683129600, &#39;high&#39;: 60, &#39;low&#39;: 53, &#39;text&#39;: &#39;Partly Cloudy&#39;, &#39;code&#39;: 30}, {&#39;day&#39;: &#39;Thu&#39;, &#39;date&#39;: 1683216000, &#39;high&#39;: 62, &#39;low&#39;: 51, &#39;text&#39;: &#39;Partly Cloudy&#39;, &#39;code&#39;: 30}, {&#39;day&#39;: &#39;Fri&#39;, &#39;date&#39;: 1683302400, &#39;high&#39;: 63, &#39;low&#39;: 53, &#39;text&#39;: &#39;Mostly Cloudy&#39;, &#39;code&#39;: 28}]} . The fetch worked and we can see all the data, but this is presented in a way that is not very readable. It also has a lot of information we didn&#39;t see. Let&#39;s say I just want to see the projected weather forecasts. . import requests url = &quot;https://yahoo-weather5.p.rapidapi.com/weather&quot; querystring = {&quot;location&quot;:&quot;San Diego&quot;,&quot;format&quot;:&quot;json&quot;,&quot;u&quot;:&quot;f&quot;} headers = { &quot;X-RapidAPI-Key&quot;: &quot;4abcb54450msh7468dfd72294e89p18fbaajsn6d4200063b39&quot;, &quot;X-RapidAPI-Host&quot;: &quot;yahoo-weather5.p.rapidapi.com&quot; } response = requests.request(&quot;GET&quot;, url, headers=headers, params=querystring) print(&quot;San Diego Weather Forecast:&quot; + &quot; n&quot;) forecast = response.json().get(&quot;forecasts&quot;) i = 0 while i &lt; len(forecast): for key, value in forecast[i].items(): print(&quot; t&quot; + key, value) i += 1 print(&quot; n&quot;) . San Diego Weather Forecast: day Tue date 1682438400 high 67 low 55 text Mostly Clear code 33 day Wed date 1682524800 high 73 low 56 text Partly Cloudy code 30 day Thu date 1682611200 high 76 low 57 text Mostly Sunny code 34 day Fri date 1682697600 high 76 low 58 text Mostly Sunny code 34 day Sat date 1682784000 high 77 low 59 text Partly Cloudy code 30 day Sun date 1682870400 high 75 low 59 text Partly Cloudy code 30 day Mon date 1682956800 high 64 low 54 text Cloudy code 26 day Tue date 1683043200 high 62 low 52 text Mostly Cloudy code 28 day Wed date 1683129600 high 60 low 53 text Partly Cloudy code 30 day Thu date 1683216000 high 62 low 51 text Partly Cloudy code 30 day Fri date 1683302400 high 63 low 53 text Mostly Cloudy code 28 . As we can see, we now can see the data in a much more organized and readable format, and we only see the forecasts, which is what we wanted to see . Hacks and Point Division . Popcorn questions answered within lesson (.2) | Screenshot showing proof that conda is installed (.1) | . . Create 3 quiz questions to demonstrate the main steps in creating a repository on Github (.1) | Fetch from a third party API, and display json data. Then use the json data in any simple JavaScript function (hint: parse, this makes json data into a JavaScript object) (.4) In your code, comment on how you implemented a 3rd party API. Reflect on how using the 3rd party API helped. | . | Pull request successful completion: (.1) | . Extra: Use fetch() and display data from an API, self-made or third party (.1) . Due Friday April 28 @ 11:59 . Quiz Questions . What keys are neccessary in order to set up a Github repository? . ssh-rsa public and private keys (correct) | ssh and rsa public keys | aes key and ssh key | aes public and private keys | . | To create a repository using another as a template you need to __ ? . fork the repository | copy paste the repository | download the repository | use the repository as a template and clone (correct) | . | If a pull request isnt automatically generating when you create a repository you must... . give up | generate a ssh public and private key on your own (correct) | change settings so that your repository includes all branches | discard the repository and open a new one. | . | . fetch: . // prepare HTML result container for new output const resultContainer = document.getElementById(&quot;result1&quot;); // prepare URL&#39;s to allow easy switch from deployment and localhost const url = &quot;https://fresh4all.duckdns.org/api/scores&quot; // const url = &quot;http://172.26.198.166:8086/api/scores&quot; const create_fetch = url + &#39;/create&#39;; const read_fetch = url + &#39;/&#39;; const del_fetch = url + &#39;/delete&#39;; // Load users on page entry read_users(); // Display User Table, data is fetched from Backend Database function read_users() { // prepare fetch options const read_options = { method: &#39;GET&#39;, // *GET, POST, PUT, DELETE, etc. mode: &#39;cors&#39;, // no-cors, *cors, same-origin cache: &#39;default&#39;, // *default, no-cache, reload, force-cache, only-if-cached credentials: &#39;omit&#39;, // include, *same-origin, omit headers: { &#39;Content-Type&#39;: &#39;application/json&#39; }, }; // fetch the data from API fetch(read_fetch, read_options) // response is a RESTful &quot;promise&quot; on any successful fetch .then(response =&gt; { // check for response errors if (response.status !== 200) { const errorMsg = &#39;Database read error: &#39; + response.status; console.log(errorMsg); const tr = document.createElement(&quot;tr&quot;); const td = document.createElement(&quot;td&quot;); td.innerHTML = errorMsg; tr.appendChild(td); resultContainer.appendChild(tr); return; } // valid response will have json data response.json().then(data =&gt; { console.log(data); for (let row in data) { console.log(data[row]); add_row(data[row]); } }) }) } . ^ in this code, I used the API i created of the scores people got on a quiz. I used fetch to get the data and create a table that displays each person and score as a row. This allowed me to have persistent (stored) data that could be updated and accessed anytime a user goes onto the website. . import requests url = &quot;https://moviesdatabase.p.rapidapi.com/titles&quot; #querystring = {&quot;title&quot;:&quot;Drama&quot;,&quot;format&quot;:&quot;json&quot;,&quot;u&quot;:&quot;f&quot;} querystring = {&quot;genre&quot;:&quot;Drama&quot;} headers = { &quot;X-RapidAPI-Key&quot;: &quot;ec628c3848mshc2f96fd1e664c35p194b32jsna5ebcbef62b6&quot;, &quot;X-RapidAPI-Host&quot;: &quot;moviesdatabase.p.rapidapi.com&quot; } response = requests.request(&quot;GET&quot;, url, headers=headers, params=querystring) print(response.json()) . {&#39;page&#39;: 1, &#39;next&#39;: &#39;/titles?genre=Drama&amp;page=2&#39;, &#39;entries&#39;: 10, &#39;results&#39;: [{&#39;id&#39;: &#39;tt0000238&#39;, &#39;primaryImage&#39;: None, &#39;titleType&#39;: {&#39;text&#39;: &#39;Short&#39;, &#39;id&#39;: &#39;short&#39;, &#39;isSeries&#39;: False, &#39;isEpisode&#39;: False, &#39;__typename&#39;: &#39;TitleType&#39;}, &#39;titleText&#39;: {&#39;text&#39;: &#34;Les dangers de l&#39;alcoolisme&#34;, &#39;__typename&#39;: &#39;TitleText&#39;}, &#39;releaseYear&#39;: {&#39;year&#39;: 1899, &#39;endYear&#39;: None, &#39;__typename&#39;: &#39;YearRange&#39;}, &#39;releaseDate&#39;: None}, {&#39;id&#39;: &#39;tt0000108&#39;, &#39;primaryImage&#39;: {&#39;id&#39;: &#39;rm1760887808&#39;, &#39;width&#39;: 614, &#39;height&#39;: 819, &#39;url&#39;: &#39;https://m.media-amazon.com/images/M/MV5BMDI4YmU1MjUtMGMyNi00NTM0LTliZDktYTk1YWMzNjlmMGQ3L2ltYWdlL2ltYWdlXkEyXkFqcGdeQXVyNzg5OTk2OA@@._V1_.jpg&#39;, &#39;caption&#39;: {&#39;plainText&#39;: &#39;Rip Leaving Sleepy Hollow (1896)&#39;, &#39;__typename&#39;: &#39;Markdown&#39;}, &#39;__typename&#39;: &#39;Image&#39;}, &#39;titleType&#39;: {&#39;text&#39;: &#39;Short&#39;, &#39;id&#39;: &#39;short&#39;, &#39;isSeries&#39;: False, &#39;isEpisode&#39;: False, &#39;__typename&#39;: &#39;TitleType&#39;}, &#39;titleText&#39;: {&#39;text&#39;: &#39;Rip Leaving Sleepy Hollow&#39;, &#39;__typename&#39;: &#39;TitleText&#39;}, &#39;releaseYear&#39;: {&#39;year&#39;: 1896, &#39;endYear&#39;: None, &#39;__typename&#39;: &#39;YearRange&#39;}, &#39;releaseDate&#39;: {&#39;day&#39;: 1, &#39;month&#39;: 9, &#39;year&#39;: 1896, &#39;__typename&#39;: &#39;ReleaseDate&#39;}}, {&#39;id&#39;: &#39;tt0000036&#39;, &#39;primaryImage&#39;: {&#39;id&#39;: &#39;rm1609892864&#39;, &#39;width&#39;: 614, &#39;height&#39;: 819, &#39;url&#39;: &#39;https://m.media-amazon.com/images/M/MV5BZWM1OGIxYzYtMzI1ZC00NDZmLWEzNmMtOTc2Y2JjNTQ0NDAyL2ltYWdlL2ltYWdlXkEyXkFqcGdeQXVyNzg5OTk2OA@@._V1_.jpg&#39;, &#39;caption&#39;: {&#39;plainText&#39;: &#39;Awakening of Rip (1896)&#39;, &#39;__typename&#39;: &#39;Markdown&#39;}, &#39;__typename&#39;: &#39;Image&#39;}, &#39;titleType&#39;: {&#39;text&#39;: &#39;Short&#39;, &#39;id&#39;: &#39;short&#39;, &#39;isSeries&#39;: False, &#39;isEpisode&#39;: False, &#39;__typename&#39;: &#39;TitleType&#39;}, &#39;titleText&#39;: {&#39;text&#39;: &#39;Awakening of Rip&#39;, &#39;__typename&#39;: &#39;TitleText&#39;}, &#39;releaseYear&#39;: {&#39;year&#39;: 1896, &#39;endYear&#39;: None, &#39;__typename&#39;: &#39;YearRange&#39;}, &#39;releaseDate&#39;: {&#39;day&#39;: 1, &#39;month&#39;: 9, &#39;year&#39;: 1896, &#39;__typename&#39;: &#39;ReleaseDate&#39;}}, {&#39;id&#39;: &#39;tt0000160&#39;, &#39;primaryImage&#39;: None, &#39;titleType&#39;: {&#39;text&#39;: &#39;Short&#39;, &#39;id&#39;: &#39;short&#39;, &#39;isSeries&#39;: False, &#39;isEpisode&#39;: False, &#39;__typename&#39;: &#39;TitleType&#39;}, &#39;titleText&#39;: {&#39;text&#39;: &#39;The Last Days of Pompeii&#39;, &#39;__typename&#39;: &#39;TitleText&#39;}, &#39;releaseYear&#39;: {&#39;year&#39;: 1900, &#39;endYear&#39;: None, &#39;__typename&#39;: &#39;YearRange&#39;}, &#39;releaseDate&#39;: {&#39;day&#39;: None, &#39;month&#39;: 7, &#39;year&#39;: 1900, &#39;__typename&#39;: &#39;ReleaseDate&#39;}}, {&#39;id&#39;: &#39;tt0000111&#39;, &#39;primaryImage&#39;: {&#39;id&#39;: &#39;rm2129986560&#39;, &#39;width&#39;: 614, &#39;height&#39;: 819, &#39;url&#39;: &#39;https://m.media-amazon.com/images/M/MV5BMDUyMzcxN2ItZWYxOS00ZDE0LTkwYjAtNjFiMDVmYWY1YWU5L2ltYWdlL2ltYWdlXkEyXkFqcGdeQXVyNzg5OTk2OA@@._V1_.jpg&#39;, &#39;caption&#39;: {&#39;plainText&#39;: &#34;Rip&#39;s Toast (1896)&#34;, &#39;__typename&#39;: &#39;Markdown&#39;}, &#39;__typename&#39;: &#39;Image&#39;}, &#39;titleType&#39;: {&#39;text&#39;: &#39;Short&#39;, &#39;id&#39;: &#39;short&#39;, &#39;isSeries&#39;: False, &#39;isEpisode&#39;: False, &#39;__typename&#39;: &#39;TitleType&#39;}, &#39;titleText&#39;: {&#39;text&#39;: &#34;Rip&#39;s Toast&#34;, &#39;__typename&#39;: &#39;TitleText&#39;}, &#39;releaseYear&#39;: {&#39;year&#39;: 1896, &#39;endYear&#39;: None, &#39;__typename&#39;: &#39;YearRange&#39;}, &#39;releaseDate&#39;: {&#39;day&#39;: 1, &#39;month&#39;: 9, &#39;year&#39;: 1896, &#39;__typename&#39;: &#39;ReleaseDate&#39;}}, {&#39;id&#39;: &#39;tt0000227&#39;, &#39;primaryImage&#39;: None, &#39;titleType&#39;: {&#39;text&#39;: &#39;Short&#39;, &#39;id&#39;: &#39;short&#39;, &#39;isSeries&#39;: False, &#39;isEpisode&#39;: False, &#39;__typename&#39;: &#39;TitleType&#39;}, &#39;titleText&#39;: {&#39;text&#39;: &#39;Bombardment of Mafeking&#39;, &#39;__typename&#39;: &#39;TitleText&#39;}, &#39;releaseYear&#39;: {&#39;year&#39;: 1899, &#39;endYear&#39;: None, &#39;__typename&#39;: &#39;YearRange&#39;}, &#39;releaseDate&#39;: {&#39;day&#39;: None, &#39;month&#39;: 11, &#39;year&#39;: 1899, &#39;__typename&#39;: &#39;ReleaseDate&#39;}}, {&#39;id&#39;: &#39;tt0000183&#39;, &#39;primaryImage&#39;: None, &#39;titleType&#39;: {&#39;text&#39;: &#39;Short&#39;, &#39;id&#39;: &#39;short&#39;, &#39;isSeries&#39;: False, &#39;isEpisode&#39;: False, &#39;__typename&#39;: &#39;TitleType&#39;}, &#39;titleText&#39;: {&#39;text&#39;: &#39;The Corsican Brothers&#39;, &#39;__typename&#39;: &#39;TitleText&#39;}, &#39;releaseYear&#39;: {&#39;year&#39;: 1898, &#39;endYear&#39;: None, &#39;__typename&#39;: &#39;YearRange&#39;}, &#39;releaseDate&#39;: {&#39;day&#39;: None, &#39;month&#39;: 8, &#39;year&#39;: 1898, &#39;__typename&#39;: &#39;ReleaseDate&#39;}}, {&#39;id&#39;: &#39;tt0000230&#39;, &#39;primaryImage&#39;: {&#39;id&#39;: &#39;rm797267968&#39;, &#39;width&#39;: 550, &#39;height&#39;: 800, &#39;url&#39;: &#39;https://m.media-amazon.com/images/M/MV5BODA0NDg4ODYtZTFkYy00ZGVkLWIzMTgtZmJjNzU4YmE2YjBiXkEyXkFqcGdeQXVyNDE5MTU2MDE@._V1_.jpg&#39;, &#39;caption&#39;: {&#39;plainText&#39;: &#39;Cendrillon (1899)&#39;, &#39;__typename&#39;: &#39;Markdown&#39;}, &#39;__typename&#39;: &#39;Image&#39;}, &#39;titleType&#39;: {&#39;text&#39;: &#39;Short&#39;, &#39;id&#39;: &#39;short&#39;, &#39;isSeries&#39;: False, &#39;isEpisode&#39;: False, &#39;__typename&#39;: &#39;TitleType&#39;}, &#39;titleText&#39;: {&#39;text&#39;: &#39;Cendrillon&#39;, &#39;__typename&#39;: &#39;TitleText&#39;}, &#39;releaseYear&#39;: {&#39;year&#39;: 1899, &#39;endYear&#39;: None, &#39;__typename&#39;: &#39;YearRange&#39;}, &#39;releaseDate&#39;: {&#39;day&#39;: None, &#39;month&#39;: 10, &#39;year&#39;: 1899, &#39;__typename&#39;: &#39;ReleaseDate&#39;}}, {&#39;id&#39;: &#39;tt0000247&#39;, &#39;primaryImage&#39;: {&#39;id&#39;: &#39;rm1531917568&#39;, &#39;width&#39;: 800, &#39;height&#39;: 527, &#39;url&#39;: &#39;https://m.media-amazon.com/images/M/MV5BZDkxNGU4MGEtNTM1ZS00Mzg2LWJkNDAtNzFmMDZlYjA4MzE0XkEyXkFqcGdeQXVyMjIzMTEyMzU@._V1_.jpg&#39;, &#39;caption&#39;: {&#39;plainText&#39;: &#39;King John (1899)&#39;, &#39;__typename&#39;: &#39;Markdown&#39;}, &#39;__typename&#39;: &#39;Image&#39;}, &#39;titleType&#39;: {&#39;text&#39;: &#39;Short&#39;, &#39;id&#39;: &#39;short&#39;, &#39;isSeries&#39;: False, &#39;isEpisode&#39;: False, &#39;__typename&#39;: &#39;TitleType&#39;}, &#39;titleText&#39;: {&#39;text&#39;: &#39;King John&#39;, &#39;__typename&#39;: &#39;TitleText&#39;}, &#39;releaseYear&#39;: {&#39;year&#39;: 1899, &#39;endYear&#39;: None, &#39;__typename&#39;: &#39;YearRange&#39;}, &#39;releaseDate&#39;: {&#39;day&#39;: 20, &#39;month&#39;: 9, &#39;year&#39;: 1899, &#39;__typename&#39;: &#39;ReleaseDate&#39;}}, {&#39;id&#39;: &#39;tt0000076&#39;, &#39;primaryImage&#39;: {&#39;id&#39;: &#39;rm404358400&#39;, &#39;width&#39;: 614, &#39;height&#39;: 819, &#39;url&#39;: &#39;https://m.media-amazon.com/images/M/MV5BZGZkYTJhZmQtNTY0NC00OWI2LWIwODUtNTM2ZGQzZmE0ZjgxL2ltYWdlL2ltYWdlXkEyXkFqcGdeQXVyNDE4OTY5NzI@._V1_.jpg&#39;, &#39;caption&#39;: {&#39;plainText&#39;: &#39;Exit of Rip and the Dwarf (1896)&#39;, &#39;__typename&#39;: &#39;Markdown&#39;}, &#39;__typename&#39;: &#39;Image&#39;}, &#39;titleType&#39;: {&#39;text&#39;: &#39;Short&#39;, &#39;id&#39;: &#39;short&#39;, &#39;isSeries&#39;: False, &#39;isEpisode&#39;: False, &#39;__typename&#39;: &#39;TitleType&#39;}, &#39;titleText&#39;: {&#39;text&#39;: &#39;Exit of Rip and the Dwarf&#39;, &#39;__typename&#39;: &#39;TitleText&#39;}, &#39;releaseYear&#39;: {&#39;year&#39;: 1896, &#39;endYear&#39;: None, &#39;__typename&#39;: &#39;YearRange&#39;}, &#39;releaseDate&#39;: {&#39;day&#39;: 1, &#39;month&#39;: 9, &#39;year&#39;: 1896, &#39;__typename&#39;: &#39;ReleaseDate&#39;}}]} . import requests url = &quot;https://moviesdatabase.p.rapidapi.com/titles&quot; querystring = {&quot;genre&quot;:&quot;Drama&quot;} headers = { &quot;X-RapidAPI-Key&quot;: &quot;ec628c3848mshc2f96fd1e664c35p194b32jsna5ebcbef62b6&quot;, &quot;X-RapidAPI-Host&quot;: &quot;moviesdatabase.p.rapidapi.com&quot; } response = requests.request(&quot;GET&quot;, url, headers=headers, params=querystring) print(&quot;Drama Movies:&quot; + &quot; n&quot;) movies = response.json().get(&quot;titles&quot;) i = 0 while i &lt; len(movies): for key, value in movies[i].items(): print(&quot; t&quot; + key, value) i += 1 print(&quot; n&quot;) .",
            "url": "https://jiya-sav.github.io/ourshiny/fastpages/jupyter/2023/04/26/ShruthiMlesson.html",
            "relUrl": "/fastpages/jupyter/2023/04/26/ShruthiMlesson.html",
            "date": " • Apr 26, 2023"
        }
        
    
  
    
        ,"post2": {
            "title": "Frontend and Backend Development with Big Idea 1 Review",
            "content": "Installing Scripts Lesson . For Windows . After you&#39;ve installed VSCode using WSL, install Anaconda on WSL. . Anaconda is like a big tool box for your computer, it has tools and libraries that you might need for data analysis, programming, and computing. Anaconda Python packages include pandas, numpy, sqlite, jupyter, bash, and other kernels. Conda is a tool that helps you manage these tools inside Anaconda. It lets you install, update, delete, and organize packages and materials. Conda script tells Conda what tools and materials you need and how to install them in your Anaconda toolbox. . . Type these commands in powershell or terminal . PS C: Users UserName&gt; wsl # Windows prompt to WSL command $ cd /tmp # used to store temporary files $ wget https://repo.anaconda.com/archive/Anaconda3-2023.03-Linux-x86_64.sh # downloadable file $ chmod +x Anaconda3-2022.05-Linux-x86_64.sh # chmod (change mode command) changes permissions for a file or directory # Answer yes to all the prompts $ ./Anaconda3-2022.05-Linux-x86_64.sh . Start a new WSL Command or Powershell. Now the WSL prompt should be prefixed with (base) from Anaconda install. If not, go back to Anaconda install. The base prefix indicates that you are running inside the conda/anaconda environment. The command &quot;conda deactivate&quot; should bring you back. . PS C: Users ShayM&gt; wsl # Windows prompt (base) shay@MSI:/mnt/c/Users/ShayM$ cd ~ # WSL prompt (base) shay@MSI:~$ # WSL home, best place to install files # you can check your conda versions (base) id:~$ conda --version . . For MacOS . Python2 install on MacOS . Install Python2&gt; VSCode install on MacOS. | Install VSCode&gt; Anaconda install on MacOS. | Download for MacOS:Anaconda- Run Install: Answer yes to questions Homebrew install on MacOS | Homebrew is a tool that helps you easily install and manage software on your Mac. Think of it like a virtual store for your computer where you can browse, download and install a variety of useful programs and tools. | Copy and Paste to Install from Terminal Homebrew - Copy bash ... curl ... command using copy box on website Launch terminal from search bar | Paste bash ... curl ... command into Terminal ... | Make sure command starts, this should provide feedback/output in terminal and could take a long time, like 10-min, there could be a prompt in the middle, at about 5-minutes. Follow any on screen instructions provided in terminal output to finish. | . | Homebrew installs a tool called &quot;brew&quot; which helps add and manage developer packages on MacOS. | . Start a new WSL terminal. Now the terminal prompt should be prefixed with (base) from Anaconda install. If not, go back to Anaconda install. . Having Homebrew and Anaconda allows you to easily install Key Packages needed on MacOS like the commands below are all neccessary:bash$ brew list # list packages $ brew update # update package list $ brew upgrade # upgrade packages $ brew install git # install latest git $ brew install python # install python3 for development $ python --version # version of python3 installed $ brew install java # openjdk install . Hacks: Screen shot that you have conda installed | . Setting up GitHub Pages with FastPages Features . All of you have created your own repository before at the beginning of the year, but some things have changed in the process. . Duplicate APCSP, and use it as template for your own repo | . Name your repo and include all branches before clicking the green create button. | . If you have an automatically generated pull request, then go ahead and follow the instructions on there. If there is no pull request, as shown below, then move on to step 4. | . Navigate to this link. Select: RSA and 4096 and leave Passphrase blank. Click the blue button Generate-SSH-Keys. You have just created an ssh key-pair. | . Navigate to this link. Replace the section of the link &quot;yourrepositoryname&quot; with your repository name. In the picture, I have inputted “ourshiny,” because it is my repository name. Replace the section of the link &quot;yourgithubname&quot; with your repository name that you just made. https://github.com/yourgithubname/yourrepositoryname/settings/secrets/actions | . Click New repository secret. Copy and paste the Private Key (generated in step 4) into the Value field. This includes the &quot;BEGIN RSA PRIVATE KEY&quot; and &quot;--END RSA PRIVATE KEY&quot; portions. In the Name field, name the secret SSH_DEPLOY_KEY. Once done, click the green Add Secret button. | . Navigate to this link, then replace the portions below with your github and repository names. My github name in the image below is jiya-sav, and my repository name is ourshiny. https://github.com/yourgithubname/yourrepositoryname/settings/keys | . Click the Add deploy key button. Paste your Public Key (generated in step 4) into the Key box. In the Title, name the key anything you want, for example fastpages-key. Finally, make sure you click the checkbox next to Allow write access (pictured below), and click the green Add key button to save the key. | . . GitHub Actions will build your site, which will take 2-3 minutes to complete. This will happen anytime you push changes to the master branch of your repository. You can monitor the logs of this if you like on the Actions tab of your repo. Your GH-Pages Status badge on your README will eventually appear and be green, indicating your first successful build. You can monitor the status of your site in the GitHub Pages section of your repository settings. | Now that you have made your repository secure, you can clone it into vscode and CODE, CODE, CODE!!! . How to Make a Pull Request . After you&#39;ve cloned a repository and made changes to it, go to pull requests in your Github repository . | Once you click &#39;create new pull request,&#39; you should see this with your new changes: . | Change the title and send the pull request . | Hacks: You will be turning in all your hacks as a pull request. Title the pull request as shown in the third step but with your own name. Any other titles will not be accepted. | . Fetching . The Basics . Fetching means getting data from somewhere else, like a website or database. | . JavaScript is a programming language that can be used to fetch data from a website or database. . When you fetch data with JavaScript, you first need to tell it where to get the data from. This is called the URL. | Once you know the URL, you can use JavaScript to go and get the data from that URL. | When the data comes back, it&#39;s usually in a format like text or JSON. This means that you might need to do some additional work to turn the data into something that your website or application can use. | Once you have the data, you can use JavaScript to display it on your website or application. You can put it in a table, show it on a map, or do anything else you can think of. | . . About Fetching . Method . The fetching methods are in line with the CRUD (Create, Read, Update, Delete), and list as follows: . &quot;GET&quot;: Probably the most common method you would use, which is in line with &quot;read&quot;. It essentially &quot;gets&quot; the information from the API and brings it to the frontend where you are able to display it and read it. | &quot;POST&quot;: Lines up with &quot;create&quot; and adds a resource to the API. You will probably mostly be using this with your own API or if a website adds your input to an API. | &quot;PUT&quot; and &quot;PATCH&quot;: Essentially the &quot;update&quot; for API. Use &quot;PUT&quot; if you want to change the whole resource, or &quot;PATCH&quot; if you want to change just one part of a resource. | &quot;DELETE&quot;: Exactly how it sounds, deletes a resource from the API | . Popcorn Hacks: . What method should I use if I want to display some of the data stored in the backend? GET | . | What method would I use if something in the data is misspelled and I want to fix it real quick? POST or PATCH | . | What method should I use if I want to add a new entry to the data? POST | . | . Filtering Data . If we want to display API data, we are going to have to filter what we want to display for multiple reasons These include making sure that the user only sees information they need to see, and not anything else | Also we need to present the information in a readable format instead of just seeing the raw data | . | . The below code segment, is from a previous project. It shows the use of a url being fetched, and the JavaScript fetch() command being implemented. . // prepare fetch urls // const url = &quot;https://ssjn.nighthawkcodescrums.gq/api/song&quot;; const url = &quot;https://ssjncpt.duckdns.org/api/song&quot;; const sad_url = url + &quot;/sad/&quot;; // sad category const happy_url = url + &quot;/happy/&quot;; // happy category const rage_url = url + &quot;/rage/&quot;; // rage category const indian_url = url + &quot;/indian/&quot;; // indian category // prepare fetch GET options const options = { method: &#39;GET&#39;, // *GET, POST, PUT, DELETE, etc. mode: &#39;cors&#39;, // cors, *cors, same-origin cache: &#39;default&#39;, // *default, no-cache, reload, force-cache, only-if-cached credentials: &#39;omit&#39;, // include, *same-origin, omit headers: { &#39;Content-Type&#39;: &#39;application/json&#39; // &#39;Content-Type&#39;: &#39;application/x-www-form-urlencoded&#39;, }, }; // prepare fetch PUT options, clones with JS Spread Operator (...) const put_options = {...options, method: &#39;PUT&#39;}; // clones and replaces method // fetch the API fetch(url, options) // response is a RESTful &quot;promise&quot; on any successful fetch .then(response =&gt; { // check for response errors if (response.status !== 200) { error(&#39;GET API response failure: &#39; + response.status); return; } } ) // valid response will have JSON data . Third Party APIs . APIs provided by other developers for public use. . | Programmers can use the content of these APIs to create new functionalities for their programs, or they can also simply take advantage of the data of the API for different uses. . Ex: A developed can use Google Account login to allow users to log in with their google account . | Ex: Using the content of a weather API to make a weather app . | . | The functionalities of these APIs are usually accessed via JavaScript (usually) as you’ve seen before in your past projects. . | 3rd party APIs are located on third party servers. To access them from JavaScript you first need to connect to the API functionality and make it available on your page. . | . &lt;script src=&quot;https://api.mqcdn.com/sdk/mapquest-js/v1.3.2/mapquest.js&quot; defer&gt;&lt;/script&gt; &lt;link rel=&quot;stylesheet&quot; href=&quot;https://api.mqcdn.com/sdk/mapquest-js/v1.3.2/mapquest.css&quot; /&gt; . Here is an example of accessing the objects available in the library above. | . const map = L.mapquest.map(&#39;map&#39;, { center: [53.480759, -2.242631], layers: L.mapquest.tileLayer(&#39;map&#39;), zoom: 12 }); . The process of accessing and using third-party APIs can vary depending on the specific API and the requirements set by the API provider. 3rd party APIs use developer keys to allow developers access to the API functionality, which protects the owner of the API. | . L.mapquest.key = &#39;YOUR-API-KEY-HERE&#39;; . Developers must apply to get the key of a certain API, and then include it in their code to be allowed access to the API&#39;s functionality. Some API keys are accessed slightly differently, but the method is similar for the most part. | . Put the link of a 3rd party API you have or will use below? . https://www.thebluealliance.com/api/v3/event/2023casd/teams | . Pandas . While 3rd party APIs give you access to a plethora of data you may have not been able to include using a completely new self-made database, pandas can help you organize and utlize this data. . Pandas is an open-source library that allows for the manipulation and analysis of numerical data, which is vital in real-life applications. . We have used this in the song recommendation program we are currently developing. The use of pandas allows us to take the csv file we obtained from a third party and display it in a format we can manipulate and analyze. . import os import pandas as pd from flask import render_template @app.route(&#39;/songdata&#39;) def songdata(): # Path to the CSV file csv_path = os.path.join(app.static_folder, &#39;songdata.csv&#39;) # Read the CSV file into a pandas dataframe df = pd.read_csv(csv_path) # Render the dataframe as an HTML table using Jinja2 return render_template(&#39;songdata.html&#39;, table=df.to_html(index=False)) . This is how the dataframe will appear on our flask: . . Python (Request) Fetch . Example with Weather API . What method is being used in these cells? GET | . | . import requests url = &quot;https://yahoo-weather5.p.rapidapi.com/weather&quot; querystring = {&quot;location&quot;:&quot;San Diego&quot;,&quot;format&quot;:&quot;json&quot;,&quot;u&quot;:&quot;f&quot;} headers = { &quot;X-RapidAPI-Key&quot;: &quot;4abcb54450msh7468dfd72294e89p18fbaajsn6d4200063b39&quot;, &quot;X-RapidAPI-Host&quot;: &quot;yahoo-weather5.p.rapidapi.com&quot; } response = requests.request(&quot;GET&quot;, url, headers=headers, params=querystring) print(response.json()) . The fetch worked and we can see all the data, but this is presented in a way that is not very readable. It also has a lot of information we didn&#39;t see. Let&#39;s say I just want to see the projected weather forecasts. . import requests url = &quot;https://yahoo-weather5.p.rapidapi.com/weather&quot; querystring = {&quot;location&quot;:&quot;San Diego&quot;,&quot;format&quot;:&quot;json&quot;,&quot;u&quot;:&quot;f&quot;} headers = { &quot;X-RapidAPI-Key&quot;: &quot;4abcb54450msh7468dfd72294e89p18fbaajsn6d4200063b39&quot;, &quot;X-RapidAPI-Host&quot;: &quot;yahoo-weather5.p.rapidapi.com&quot; } response = requests.request(&quot;GET&quot;, url, headers=headers, params=querystring) print(&quot;San Diego Weather Forecast:&quot; + &quot; n&quot;) forecast = response.json().get(&quot;forecasts&quot;) i = 0 while i &lt; len(forecast): for key, value in forecast[i].items(): print(&quot; t&quot; + key, value) i += 1 print(&quot; n&quot;) . As we can see, we now can see the data in a much more organized and readable format, and we only see the forecasts, which is what we wanted to see . Hacks and Point Division . Popcorn questions answered within lesson (.2) | Screenshot showing proof that conda is installed (.1) | Create 3 quiz questions to demonstrate the main steps in creating a repository on Github (.1) | Fetch from a third party API, and display json data. Then use the json data in any simple JavaScript function (hint: parse, this makes json data into a JavaScript object) (.4) In your code, comment on how you implemented a 3rd party API. Reflect on how using the 3rd party API helped. | . | Pull request successful completion: (.1) | . Extra: Use fetch() and display data from an API, self-made or third party (.1) . const fetch = require(&quot;node-fetch&quot;) . &lt;/p&gt; . &lt;/table&gt; . &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; var url = &quot;https://www.thebluealliance.com/api/v3&quot; var options = { method: &#39;GET&#39;, headers:{ &#39;Content-Type&#39;: &#39;application/json&#39;, &#39;X-TBA-Auth-Key&#39;: &#39;Ue5lGW4YPg6MWgRegaABwv95QwTdNPEtenLmxuvF4KNsWeUEdE0X9mYhpBZocHcW&#39;, } } fetch(url + &quot;/event/2023casd/teams&quot;, options) .then(response =&gt; response.json().then(data =&gt; { console.log(&quot;| Team number | City | Team Name | School Name | n&quot;) data.forEach(element =&gt; { console.log(`| ${element.team_number} | ${element.city} | ${element.nickname} | ${element.school_name} |`) }); }) ) .catch(err =&gt; console.error(err)) // I used the Blue Alliance API for the FIRST Robotics Competition. In this fetch I get the teams that are playing in // the 2023 San Diego regional and extra data about them. I then display that data in the output below. // This is really useful because I can connect this data to code or I can find many statistics without // going to their website . Promise { &lt;pending&gt; } . | Team number | City | Team Name | School Name | | 1266 | San Diego | The Devil Duckies | Serra High School | | 1538 | San Diego | The Holy Cows | High Tech High School | | 1572 | San Diego | The Hammer Heads | Kearny High Educational Complex | | 1622 | Poway | Team Spyder | Poway High School | | 1972 | El Centro | Searing Engineering | Central Union High School | | 2102 | Encinitas | Team Paradox | San Dieguito High Sch Academy | | 2485 | San Diego | W.A.R. Lords | Francis Parker | | 2543 | Chula Vista | TitanBot | Eastlake High School | | 2658 | San Diego | Σ-Motion | Rancho Bernardo High School | | 2827 | Coronado | The Tiki Bots | Coronado High School | | 2839 | Escondido | Daedalus | Escondido Charter High School | | 2984 | La Jolla | Vikings Robotics | La Jolla Senior High School | | 3128 | San Diego | The Aluminum Narwhals | Canyon Crest Academy | | 3255 | Escondido | SuperNURDs | San Pasqual High School | | 3341 | San Diego | Option 16 | Westview High School | | 3473 | Diamond Bar | Team Sprocket | Diamond Bar High School | | 3647 | San Diego | Millennium Falcons | Torrey Pines High School | | 3704 | National City | RoboSapiens | Sweetwater High School | | 3749 | San Diego | Team Optix | Del Norte High School | | 3965 | Santee | Sultans | Santana High School | | 4141 | Santa Ana | Monarch Robotics | Mater Dei High School | | 4160 | San Diego | The RoBucs | Mission Bay High School | | 4276 | Huntington Beach | Surf City Vikings | Marina High School | | 4322 | Orange | Clockwork Oranges | Boy Scouts of America | | 4419 | San Marcos | Team Rewind | High Tech High North County | | 4738 | San Diego | Patribots | Patrick Henry High School | | 4919 | La Mesa | Team Ronin | River Valley Charter School | | 4984 | Temecula | Bullseye | Rancho Christian School | | 5025 | San Diego | Pacific Steel | Cathedral Catholic High School | | 5285 | Palos Verdes Estates | Sea Kings Robotics | Palos Verdes High School | | 5474 | San Diego | Clairemonster | Clairemont High School | | 589 | La Crescenta | Falkon Robotics | Crescenta Valley High School | | 599 | Granada Hills | The Robodox | Granada Hills Charter High Sch | | 5993 | Bakırköy | Istech Robotics Society | İstek Özel Bilge Kağan Liseleri | | 6417 | Glarus | Fridolins | Kantonsschule Glarus | | 6515 | Calexico | Unimatics | Calexico High School | | 6560 | Irvine | Charging Champions | Family/Community | | 6695 | San Marcos | Alpha Knights | San Marcos High School | | 6885 | San Diego | The Pilots | Academy Of Our Lady of Peace | | 6995 | Escondido | NOMAD | Family/Community | | 702 | Culver City | Bagel Bytes | Culver City High School | | 7589 | Taipei | Lishan Blue Magpie | Taipei Municipal Li-Shan Senior High School | | 8006 | Los Angeles | The Phantoms | Cathedral High School | | 8020 | Taipei | CyberpunK | Taipei Municipal Chien Kuo (Jianguo) High School | | 8119 | Imperial | TigerBotics | Imperial High School | | 812 | La Jolla | The Midnight Mechanics | Preuss School | | 8537 | Imperial Beach | MechanicAnts | Family/Community | | 8870 | San Diego | RedCards | Hoover High School | | 8891 | Oceanside | Wild Raccoons | Oceanside High School | | 973 | Atascadero | Greybots | Atascadero High School &amp; Atascadero Education Foundation, Inc. | . Creating a repository on Github. . Q1 . What repository do you need to clone? a: APCSP b: APCSA c: nighthawk_csp d: lask_portfolio Answer: APCSP . Q2 . How many keys do you need to generate? a: 0 b: 1 c: 2 d: 3 Answer: 2 . Q3 . How long does github pages take to deploy? a: 0 secs b: 1-2 mins c: 2-3 mins d: 10-15 mins Answer: 2-3 min . &lt;/div&gt; .",
            "url": "https://jiya-sav.github.io/ourshiny/2023/04/26/LessonDashiellPenning.html",
            "relUrl": "/2023/04/26/LessonDashiellPenning.html",
            "date": " • Apr 26, 2023"
        }
        
    
  
    
        ,"post3": {
            "title": "Frontend and Backend Development with Big Idea 1 Review",
            "content": "Installing Scripts Lesson . For Windows . After you&#39;ve installed VSCode using WSL, install Anaconda on WSL. . Anaconda is like a big tool box for your computer, it has tools and libraries that you might need for data analysis, programming, and computing. Anaconda Python packages include pandas, numpy, sqlite, jupyter, bash, and other kernels. Conda is a tool that helps you manage these tools inside Anaconda. It lets you install, update, delete, and organize packages and materials. Conda script tells Conda what tools and materials you need and how to install them in your Anaconda toolbox. . . Type these commands in powershell or terminal . PS C: Users UserName&gt; wsl # Windows prompt to WSL command $ cd /tmp # used to store temporary files $ wget https://repo.anaconda.com/archive/Anaconda3-2023.03-Linux-x86_64.sh # downloadable file $ chmod +x Anaconda3-2022.05-Linux-x86_64.sh # chmod (change mode command) changes permissions for a file or directory # Answer yes to all the prompts $ ./Anaconda3-2022.05-Linux-x86_64.sh . Start a new WSL Command or Powershell. Now the WSL prompt should be prefixed with (base) from Anaconda install. If not, go back to Anaconda install. The base prefix indicates that you are running inside the conda/anaconda environment. The command &quot;conda deactivate&quot; should bring you back. . PS C: Users ShayM&gt; wsl # Windows prompt (base) shay@MSI:/mnt/c/Users/ShayM$ cd ~ # WSL prompt (base) shay@MSI:~$ # WSL home, best place to install files # you can check your conda versions (base) id:~$ conda --version . . For MacOS . Python2 install on MacOS . Install Python2&gt; VSCode install on MacOS. | Install VSCode&gt; Anaconda install on MacOS. | Download for MacOS:Anaconda- Run Install: Answer yes to questions Homebrew install on MacOS | Homebrew is a tool that helps you easily install and manage software on your Mac. Think of it like a virtual store for your computer where you can browse, download and install a variety of useful programs and tools. | Copy and Paste to Install from Terminal Homebrew - Copy bash ... curl ... command using copy box on website Launch terminal from search bar | Paste bash ... curl ... command into Terminal ... | Make sure command starts, this should provide feedback/output in terminal and could take a long time, like 10-min, there could be a prompt in the middle, at about 5-minutes. Follow any on screen instructions provided in terminal output to finish. | . | Homebrew installs a tool called &quot;brew&quot; which helps add and manage developer packages on MacOS. | . Start a new WSL terminal. Now the terminal prompt should be prefixed with (base) from Anaconda install. If not, go back to Anaconda install. . Having Homebrew and Anaconda allows you to easily install Key Packages needed on MacOS like the commands below are all neccessary:bash$ brew list # list packages $ brew update # update package list $ brew upgrade # upgrade packages $ brew install git # install latest git $ brew install python # install python3 for development $ python --version # version of python3 installed $ brew install java # openjdk install . Hacks: Screen shot that you have conda installed | . . Setting up GitHub Pages with FastPages Features . All of you have created your own repository before at the beginning of the year, but some things have changed in the process. . Duplicate APCSP, and use it as template for your own repo | . Name your repo and include all branches before clicking the green create button. | . If you have an automatically generated pull request, then go ahead and follow the instructions on there. If there is no pull request, as shown below, then move on to step 4. | . Navigate to this link. Select: RSA and 4096 and leave Passphrase blank. Click the blue button Generate-SSH-Keys. You have just created an ssh key-pair. | . Navigate to this link. Replace the section of the link &quot;yourrepositoryname&quot; with your repository name. In the picture, I have inputted “ourshiny,” because it is my repository name. Replace the section of the link &quot;yourgithubname&quot; with your repository name that you just made. https://github.com/yourgithubname/yourrepositoryname/settings/secrets/actions | . Click New repository secret. Copy and paste the Private Key (generated in step 4) into the Value field. This includes the &quot;BEGIN RSA PRIVATE KEY&quot; and &quot;--END RSA PRIVATE KEY&quot; portions. In the Name field, name the secret SSH_DEPLOY_KEY. Once done, click the green Add Secret button. | . Navigate to this link, then replace the portions below with your github and repository names. My github name in the image below is jiya-sav, and my repository name is ourshiny. https://github.com/yourgithubname/yourrepositoryname/settings/keys | . Click the Add deploy key button. Paste your Public Key (generated in step 4) into the Key box. In the Title, name the key anything you want, for example fastpages-key. Finally, make sure you click the checkbox next to Allow write access (pictured below), and click the green Add key button to save the key. | . . GitHub Actions will build your site, which will take 2-3 minutes to complete. This will happen anytime you push changes to the master branch of your repository. You can monitor the logs of this if you like on the Actions tab of your repo. Your GH-Pages Status badge on your README will eventually appear and be green, indicating your first successful build. You can monitor the status of your site in the GitHub Pages section of your repository settings. | Now that you have made your repository secure, you can clone it into vscode and CODE, CODE, CODE!!! . How to Make a Pull Request . After you&#39;ve cloned a repository and made changes to it, go to pull requests in your Github repository . | Once you click &#39;create new pull request,&#39; you should see this with your new changes: . | Change the title and send the pull request . | Hacks: You will be turning in all your hacks as a pull request. Title the pull request as shown in the third step but with your own name. Any other titles will not be accepted. | . Fetching . The Basics . Fetching means getting data from somewhere else, like a website or database. | . JavaScript is a programming language that can be used to fetch data from a website or database. . When you fetch data with JavaScript, you first need to tell it where to get the data from. This is called the URL. | Once you know the URL, you can use JavaScript to go and get the data from that URL. | When the data comes back, it&#39;s usually in a format like text or JSON. This means that you might need to do some additional work to turn the data into something that your website or application can use. | Once you have the data, you can use JavaScript to display it on your website or application. You can put it in a table, show it on a map, or do anything else you can think of. | . . About Fetching . Method . The fetching methods are in line with the CRUD (Create, Read, Update, Delete), and list as follows: . &quot;GET&quot;: Probably the most common method you would use, which is in line with &quot;read&quot;. It essentially &quot;gets&quot; the information from the API and brings it to the frontend where you are able to display it and read it. | &quot;POST&quot;: Lines up with &quot;create&quot; and adds a resource to the API. You will probably mostly be using this with your own API or if a website adds your input to an API. | &quot;PUT&quot; and &quot;PATCH&quot;: Essentially the &quot;update&quot; for API. Use &quot;PUT&quot; if you want to change the whole resource, or &quot;PATCH&quot; if you want to change just one part of a resource. | &quot;DELETE&quot;: Exactly how it sounds, deletes a resource from the API | . Popcorn Hacks: . What method should I use if I want to display some of the data stored in the backend? a GET method can be used to display data in frontend | . | What method would I use if something in the data is misspelled and I want to fix it real quick? a PUT method can be used to update/alter already existing data | . | What method should I use if I want to add a new entry to the data? a POST method can be used to add new data | . | . Filtering Data . If we want to display API data, we are going to have to filter what we want to display for multiple reasons These include making sure that the user only sees information they need to see, and not anything else | Also we need to present the information in a readable format instead of just seeing the raw data | . | . The below code segment, is from a previous project. It shows the use of a url being fetched, and the JavaScript fetch() command being implemented. . // prepare fetch urls // const url = &quot;https://ssjn.nighthawkcodescrums.gq/api/song&quot;; const url = &quot;https://ssjncpt.duckdns.org/api/song&quot;; const sad_url = url + &quot;/sad/&quot;; // sad category const happy_url = url + &quot;/happy/&quot;; // happy category const rage_url = url + &quot;/rage/&quot;; // rage category const indian_url = url + &quot;/indian/&quot;; // indian category // prepare fetch GET options const options = { method: &#39;GET&#39;, // *GET, POST, PUT, DELETE, etc. mode: &#39;cors&#39;, // cors, *cors, same-origin cache: &#39;default&#39;, // *default, no-cache, reload, force-cache, only-if-cached credentials: &#39;omit&#39;, // include, *same-origin, omit headers: { &#39;Content-Type&#39;: &#39;application/json&#39; // &#39;Content-Type&#39;: &#39;application/x-www-form-urlencoded&#39;, }, }; // prepare fetch PUT options, clones with JS Spread Operator (...) const put_options = {...options, method: &#39;PUT&#39;}; // clones and replaces method // fetch the API fetch(url, options) // response is a RESTful &quot;promise&quot; on any successful fetch .then(response =&gt; { // check for response errors if (response.status !== 200) { error(&#39;GET API response failure: &#39; + response.status); return; } // valid response will have JSON data . Third Party APIs . APIs provided by other developers for public use. . | Programmers can use the content of these APIs to create new functionalities for their programs, or they can also simply take advantage of the data of the API for different uses. . Ex: A developed can use Google Account login to allow users to log in with their google account . | Ex: Using the content of a weather API to make a weather app . | . | The functionalities of these APIs are usually accessed via JavaScript (usually) as you’ve seen before in your past projects. . | 3rd party APIs are located on third party servers. To access them from JavaScript you first need to connect to the API functionality and make it available on your page. . | . &lt;script src=&quot;https://api.mqcdn.com/sdk/mapquest-js/v1.3.2/mapquest.js&quot; defer&gt;&lt;/script&gt; &lt;link rel=&quot;stylesheet&quot; href=&quot;https://api.mqcdn.com/sdk/mapquest-js/v1.3.2/mapquest.css&quot; /&gt; . Here is an example of accessing the objects available in the library above. | . const map = L.mapquest.map(&#39;map&#39;, { center: [53.480759, -2.242631], layers: L.mapquest.tileLayer(&#39;map&#39;), zoom: 12 }); . The process of accessing and using third-party APIs can vary depending on the specific API and the requirements set by the API provider. 3rd party APIs use developer keys to allow developers access to the API functionality, which protects the owner of the API. | . L.mapquest.key = &#39;YOUR-API-KEY-HERE&#39;; . Developers must apply to get the key of a certain API, and then include it in their code to be allowed access to the API&#39;s functionality. Some API keys are accessed slightly differently, but the method is similar for the most part. | . Put the link of a 3rd party API you have or will use below? . Pandas . While 3rd party APIs give you access to a plethora of data you may have not been able to include using a completely new self-made database, pandas can help you organize and utlize this data. . Pandas is an open-source library that allows for the manipulation and analysis of numerical data, which is vital in real-life applications. . We have used this in the song recommendation program we are currently developing. The use of pandas allows us to take the csv file we obtained from a third party and display it in a format we can manipulate and analyze. . import os import pandas as pd from flask import render_template @app.route(&#39;/songdata&#39;) def songdata(): # Path to the CSV file csv_path = os.path.join(app.static_folder, &#39;songdata.csv&#39;) # Read the CSV file into a pandas dataframe df = pd.read_csv(csv_path) # Render the dataframe as an HTML table using Jinja2 return render_template(&#39;songdata.html&#39;, table=df.to_html(index=False)) . This is how the dataframe will appear on our flask: . . Python (Request) Fetch . Example with Weather API . What method is being used in these cells? -- a GET method | . import requests url = &quot;https://yahoo-weather5.p.rapidapi.com/weather&quot; querystring = {&quot;location&quot;:&quot;San Diego&quot;,&quot;format&quot;:&quot;json&quot;,&quot;u&quot;:&quot;f&quot;} headers = { &quot;X-RapidAPI-Key&quot;: &quot;4abcb54450msh7468dfd72294e89p18fbaajsn6d4200063b39&quot;, &quot;X-RapidAPI-Host&quot;: &quot;yahoo-weather5.p.rapidapi.com&quot; } response = requests.request(&quot;GET&quot;, url, headers=headers, params=querystring) print(response.json()) . {&#39;location&#39;: {&#39;city&#39;: &#39;San Diego&#39;, &#39;woeid&#39;: 2487889, &#39;country&#39;: &#39;United States&#39;, &#39;lat&#39;: 32.831699, &#39;long&#39;: -117.122002, &#39;timezone_id&#39;: &#39;America/Los_Angeles&#39;}, &#39;current_observation&#39;: {&#39;pubDate&#39;: 1682463385, &#39;wind&#39;: {&#39;chill&#39;: 64, &#39;direction&#39;: &#39;WSW&#39;, &#39;speed&#39;: 9}, &#39;atmosphere&#39;: {&#39;humidity&#39;: 65, &#39;visibility&#39;: 10, &#39;pressure&#39;: 1012.5}, &#39;astronomy&#39;: {&#39;sunrise&#39;: &#39;6:08 AM&#39;, &#39;sunset&#39;: &#39;7:26 PM&#39;}, &#39;condition&#39;: {&#39;temperature&#39;: 65, &#39;text&#39;: &#39;Mostly Cloudy&#39;, &#39;code&#39;: 28}}, &#39;forecasts&#39;: [{&#39;day&#39;: &#39;Tue&#39;, &#39;date&#39;: 1682438400, &#39;high&#39;: 67, &#39;low&#39;: 55, &#39;text&#39;: &#39;Mostly Clear&#39;, &#39;code&#39;: 33}, {&#39;day&#39;: &#39;Wed&#39;, &#39;date&#39;: 1682524800, &#39;high&#39;: 73, &#39;low&#39;: 56, &#39;text&#39;: &#39;Partly Cloudy&#39;, &#39;code&#39;: 30}, {&#39;day&#39;: &#39;Thu&#39;, &#39;date&#39;: 1682611200, &#39;high&#39;: 76, &#39;low&#39;: 57, &#39;text&#39;: &#39;Mostly Sunny&#39;, &#39;code&#39;: 34}, {&#39;day&#39;: &#39;Fri&#39;, &#39;date&#39;: 1682697600, &#39;high&#39;: 76, &#39;low&#39;: 58, &#39;text&#39;: &#39;Mostly Sunny&#39;, &#39;code&#39;: 34}, {&#39;day&#39;: &#39;Sat&#39;, &#39;date&#39;: 1682784000, &#39;high&#39;: 77, &#39;low&#39;: 59, &#39;text&#39;: &#39;Partly Cloudy&#39;, &#39;code&#39;: 30}, {&#39;day&#39;: &#39;Sun&#39;, &#39;date&#39;: 1682870400, &#39;high&#39;: 75, &#39;low&#39;: 59, &#39;text&#39;: &#39;Partly Cloudy&#39;, &#39;code&#39;: 30}, {&#39;day&#39;: &#39;Mon&#39;, &#39;date&#39;: 1682956800, &#39;high&#39;: 64, &#39;low&#39;: 54, &#39;text&#39;: &#39;Cloudy&#39;, &#39;code&#39;: 26}, {&#39;day&#39;: &#39;Tue&#39;, &#39;date&#39;: 1683043200, &#39;high&#39;: 62, &#39;low&#39;: 52, &#39;text&#39;: &#39;Mostly Cloudy&#39;, &#39;code&#39;: 28}, {&#39;day&#39;: &#39;Wed&#39;, &#39;date&#39;: 1683129600, &#39;high&#39;: 60, &#39;low&#39;: 53, &#39;text&#39;: &#39;Partly Cloudy&#39;, &#39;code&#39;: 30}, {&#39;day&#39;: &#39;Thu&#39;, &#39;date&#39;: 1683216000, &#39;high&#39;: 62, &#39;low&#39;: 51, &#39;text&#39;: &#39;Partly Cloudy&#39;, &#39;code&#39;: 30}, {&#39;day&#39;: &#39;Fri&#39;, &#39;date&#39;: 1683302400, &#39;high&#39;: 63, &#39;low&#39;: 53, &#39;text&#39;: &#39;Mostly Cloudy&#39;, &#39;code&#39;: 28}]} . The fetch worked and we can see all the data, but this is presented in a way that is not very readable. It also has a lot of information we didn&#39;t see. Let&#39;s say I just want to see the projected weather forecasts. . import requests url = &quot;https://yahoo-weather5.p.rapidapi.com/weather&quot; querystring = {&quot;location&quot;:&quot;San Diego&quot;,&quot;format&quot;:&quot;json&quot;,&quot;u&quot;:&quot;f&quot;} headers = { &quot;X-RapidAPI-Key&quot;: &quot;4abcb54450msh7468dfd72294e89p18fbaajsn6d4200063b39&quot;, &quot;X-RapidAPI-Host&quot;: &quot;yahoo-weather5.p.rapidapi.com&quot; } response = requests.request(&quot;GET&quot;, url, headers=headers, params=querystring) print(&quot;San Diego Weather Forecast:&quot; + &quot; n&quot;) forecast = response.json().get(&quot;forecasts&quot;) i = 0 while i &lt; len(forecast): for key, value in forecast[i].items(): print(&quot; t&quot; + key, value) i += 1 print(&quot; n&quot;) . San Diego Weather Forecast: day Tue date 1682438400 high 67 low 55 text Mostly Clear code 33 day Wed date 1682524800 high 73 low 56 text Partly Cloudy code 30 day Thu date 1682611200 high 76 low 57 text Mostly Sunny code 34 day Fri date 1682697600 high 76 low 58 text Mostly Sunny code 34 day Sat date 1682784000 high 77 low 59 text Partly Cloudy code 30 day Sun date 1682870400 high 75 low 59 text Partly Cloudy code 30 day Mon date 1682956800 high 64 low 54 text Cloudy code 26 day Tue date 1683043200 high 62 low 52 text Mostly Cloudy code 28 day Wed date 1683129600 high 60 low 53 text Partly Cloudy code 30 day Thu date 1683216000 high 62 low 51 text Partly Cloudy code 30 day Fri date 1683302400 high 63 low 53 text Mostly Cloudy code 28 . As we can see, we now can see the data in a much more organized and readable format, and we only see the forecasts, which is what we wanted to see . Hacks and Point Division . [X] Popcorn questions answered within lesson (.2) | [X] Screenshot showing proof that conda is installed (.1) | [X] Create 3 quiz questions to demonstrate the main steps in creating a repository on Github (.1) done below | [X] Fetch from a third party API, and display json data. Then use the json data in any simple JavaScript function (hint: parse, this makes json data into a JavaScript object) (.4) In your code, comment on how you implemented a 3rd party API. Reflect on how using the 3rd party API helped. | . | [X] Pull request successful completion: (.1) | . Extra: Use fetch() and display data from an API, self-made or third party (.1) -- . Due Friday April 28 @ 11:59 . Quiz Questions . 1: What are the key settings and size that must be selected for an SSH Key-pair? . A) DSA w/ size 2048 B) DSA w/ size 4096 C) RSA w/ size 4096 D) RSA w/ size 1024 . CORRECT ANSWER: C . 2: What name should be given to the action secret in your repository . A) SSH_SECRET_KEY B) SSH_DEPLOY_KEY C) SSH_PRIVATE_KEY D) SSH_PUBLIC_KEY . CORRECT ANSWER: B . 3: True or False -- The private generated key goes into &quot;Deploy Keys&quot; in your repository . A) True B) False . CORRECT ANSWER: B -- Public key goes in that location . Data from third Party API . The data below is from an API created by NASA, with information about asteroids from the Kuiper belt that pass through our solar system close to Earth. . import requests import json start_date = &#39;2015-09-07&#39; end_date = &#39;2015-09-08&#39; #i chose to only display the data given by the api for one day, to limit amount of data being displayed api_key = &#39;4rBodTLHYkD9uofOsxFBIxrqNko2cuXa4fwAh6Nh&#39; #api key generated by NASA url = f&#39;https://api.nasa.gov/neo/rest/v1/feed?start_date={start_date}&amp;end_date={end_date}&amp;api_key={api_key}&#39; #url query came with built in function for start and end dates response = requests.get(url) data = json.loads(response.text) # extract data from the response for date in data[&#39;near_earth_objects&#39;]: for asteroid in data[&#39;near_earth_objects&#39;][date]: name = asteroid[&#39;name&#39;] diameter = asteroid[&#39;estimated_diameter&#39;][&#39;kilometers&#39;][&#39;estimated_diameter_max&#39;] hazardous = asteroid[&#39;is_potentially_hazardous_asteroid&#39;] # print data print(&#39;Name:&#39;, name) print(&#39;Diameter (km):&#39;, diameter) print(&#39;Potentially Hazardous:&#39;, hazardous) print(&#39;-&#39;) . Name: 465633 (2009 JR5) Diameter (km): 0.4764748465 Potentially Hazardous: True - Name: (2008 QV11) Diameter (km): 0.320656449 Potentially Hazardous: False - Name: (2010 XT10) Diameter (km): 0.0297879063 Potentially Hazardous: False - Name: (2015 RC) Diameter (km): 0.0820427065 Potentially Hazardous: False - Name: (2015 RO36) Diameter (km): 0.1563291544 Potentially Hazardous: False - Name: (2015 RN83) Diameter (km): 0.2716689341 Potentially Hazardous: False - Name: (2015 TX237) Diameter (km): 0.130028927 Potentially Hazardous: False - Name: (2015 UG) Diameter (km): 0.1629446024 Potentially Hazardous: False - Name: (2016 EK158) Diameter (km): 0.4742856434 Potentially Hazardous: False - Name: (2016 RT) Diameter (km): 0.0783501764 Potentially Hazardous: False - Name: (2021 QP3) Diameter (km): 0.1714115092 Potentially Hazardous: False - Name: (2021 VC9) Diameter (km): 0.0230165369 Potentially Hazardous: False - Name: 440012 (2002 LE27) Diameter (km): 0.7112789871 Potentially Hazardous: False - Name: (2015 FC35) Diameter (km): 0.2259643771 Potentially Hazardous: False - Name: (2015 RG2) Diameter (km): 0.0271668934 Potentially Hazardous: False - Name: (2015 RL35) Diameter (km): 0.0326617897 Potentially Hazardous: False - Name: (2015 RH36) Diameter (km): 0.1132504611 Potentially Hazardous: False - Name: (2015 RX83) Diameter (km): 0.1563291544 Potentially Hazardous: False - Name: (2015 RY83) Diameter (km): 0.0859092601 Potentially Hazardous: False - Name: (2016 RU33) Diameter (km): 0.0187948982 Potentially Hazardous: False - Name: (2016 RN41) Diameter (km): 0.0037020304 Potentially Hazardous: False - Name: (2018 RZ2) Diameter (km): 0.2157943048 Potentially Hazardous: False - Name: (2019 QK4) Diameter (km): 0.411187571 Potentially Hazardous: False - Name: (2020 BY) Diameter (km): 0.0748238376 Potentially Hazardous: False - Name: (2020 WZ) Diameter (km): 0.0247765013 Potentially Hazardous: False - . Using fetch to pull info to frontend: . . Fetch (code is in asteroids.html file): . .",
            "url": "https://jiya-sav.github.io/ourshiny/fastpages/jupyter/2023/04/26/EkamjotKaire.html",
            "relUrl": "/fastpages/jupyter/2023/04/26/EkamjotKaire.html",
            "date": " • Apr 26, 2023"
        }
        
    
  
    
        ,"post4": {
            "title": "Frontend and Backend Development with Big Idea 1 Review",
            "content": "Installing Scripts Lesson . For Windows . After you&#39;ve installed VSCode using WSL, install Anaconda on WSL. . Anaconda is like a big tool box for your computer, it has tools and libraries that you might need for data analysis, programming, and computing. Anaconda Python packages include pandas, numpy, sqlite, jupyter, bash, and other kernels. Conda is a tool that helps you manage these tools inside Anaconda. It lets you install, update, delete, and organize packages and materials. Conda script tells Conda what tools and materials you need and how to install them in your Anaconda toolbox. . . Type these commands in powershell or terminal . PS C: Users UserName&gt; wsl # Windows prompt to WSL command $ cd /tmp # used to store temporary files $ wget https://repo.anaconda.com/archive/Anaconda3-2023.03-Linux-x86_64.sh # downloadable file $ chmod +x Anaconda3-2022.05-Linux-x86_64.sh # chmod (change mode command) changes permissions for a file or directory # Answer yes to all the prompts $ ./Anaconda3-2022.05-Linux-x86_64.sh Start a new WSL Command or Powershell. Now the WSL prompt should be prefixed with (base) from Anaconda install. If not, go back to Anaconda install. The base prefix indicates that you are running inside the conda/anaconda environment. The command &quot;conda deactivate&quot; should bring you back. . PS C: Users ShayM&gt; wsl # Windows prompt (base) shay@MSI:/mnt/c/Users/ShayM$ cd ~ # WSL prompt (base) shay@MSI:~$ # WSL home, best place to install files # you can check your conda versions (base) id:~$ conda --version . For MacOS . Python2 install on MacOS . Install Python2&gt; VSCode install on MacOS. | Install VSCode&gt; Anaconda install on MacOS. | Download for MacOS:Anaconda- Run Install: Answer yes to questions Homebrew install on MacOS | Homebrew is a tool that helps you easily install and manage software on your Mac. Think of it like a virtual store for your computer where you can browse, download and install a variety of useful programs and tools. | Copy and Paste to Install from Terminal Homebrew - Copy bash ... curl ... command using copy box on website Launch terminal from search bar | Paste bash ... curl ... command into Terminal ... | Make sure command starts, this should provide feedback/output in terminal and could take a long time, like 10-min, there could be a prompt in the middle, at about 5-minutes. Follow any on screen instructions provided in terminal output to finish. | . | Homebrew installs a tool called &quot;brew&quot; which helps add and manage developer packages on MacOS. | . Start a new WSL terminal. Now the terminal prompt should be prefixed with (base) from Anaconda install. If not, go back to Anaconda install. . Having Homebrew and Anaconda allows you to easily install Key Packages needed on MacOS like the commands below are all neccessary:bash$ brew list # list packages $ brew update # update package list $ brew upgrade # upgrade packages $ brew install git # install latest git $ brew install python # install python3 for development $ python --version # version of python3 installed $ brew install java # openjdk install . Hacks: Screen shot that you have conda installed | . Proof of Conda (Hack) . Setting up GitHub Pages with FastPages Features . All of you have created your own repository before at the beginning of the year, but some things have changed in the process. . Duplicate APCSP, and use it as template for your own repo | . Name your repo and include all branches before clicking the green create button. | . If you have an automatically generated pull request, then go ahead and follow the instructions on there. If there is no pull request, as shown below, then move on to step 4. | . Navigate to this link. Select: RSA and 4096 and leave Passphrase blank. Click the blue button Generate-SSH-Keys. You have just created an ssh key-pair. | . Navigate to this link. Replace the section of the link &quot;yourrepositoryname&quot; with your repository name. In the picture, I have inputted “ourshiny,” because it is my repository name. Replace the section of the link &quot;yourgithubname&quot; with your repository name that you just made. https://github.com/yourgithubname/yourrepositoryname/settings/secrets/actions | . Click New repository secret. Copy and paste the Private Key (generated in step 4) into the Value field. This includes the &quot;BEGIN RSA PRIVATE KEY&quot; and &quot;--END RSA PRIVATE KEY&quot; portions. In the Name field, name the secret SSH_DEPLOY_KEY. Once done, click the green Add Secret button. | . Navigate to this link, then replace the portions below with your github and repository names. My github name in the image below is jiya-sav, and my repository name is ourshiny. https://github.com/yourgithubname/yourrepositoryname/settings/keys | . Click the Add deploy key button. Paste your Public Key (generated in step 4) into the Key box. In the Title, name the key anything you want, for example fastpages-key. Finally, make sure you click the checkbox next to Allow write access (pictured below), and click the green Add key button to save the key. | . . GitHub Actions will build your site, which will take 2-3 minutes to complete. This will happen anytime you push changes to the master branch of your repository. You can monitor the logs of this if you like on the Actions tab of your repo. Your GH-Pages Status badge on your README will eventually appear and be green, indicating your first successful build. You can monitor the status of your site in the GitHub Pages section of your repository settings. | Now that you have made your repository secure, you can clone it into vscode and CODE, CODE, CODE!!! . How to Make a Pull Request . After you&#39;ve cloned a repository and made changes to it, go to pull requests in your Github repository . | Once you click &#39;create new pull request,&#39; you should see this with your new changes: . | Change the title and send the pull request . | Hacks: You will be turning in all your hacks as a pull request. Title the pull request as shown in the third step but with your own name. Any other titles will not be accepted. | . Fetching . The Basics . Fetching means getting data from somewhere else, like a website or database. | . JavaScript is a programming language that can be used to fetch data from a website or database. . When you fetch data with JavaScript, you first need to tell it where to get the data from. This is called the URL. | Once you know the URL, you can use JavaScript to go and get the data from that URL. | When the data comes back, it&#39;s usually in a format like text or JSON. This means that you might need to do some additional work to turn the data into something that your website or application can use. | Once you have the data, you can use JavaScript to display it on your website or application. You can put it in a table, show it on a map, or do anything else you can think of. | . . About Fetching . Method . The fetching methods are in line with the CRUD (Create, Read, Update, Delete), and list as follows: . &quot;GET&quot;: Probably the most common method you would use, which is in line with &quot;read&quot;. It essentially &quot;gets&quot; the information from the API and brings it to the frontend where you are able to display it and read it. | &quot;POST&quot;: Lines up with &quot;create&quot; and adds a resource to the API. You will probably mostly be using this with your own API or if a website adds your input to an API. | &quot;PUT&quot; and &quot;PATCH&quot;: Essentially the &quot;update&quot; for API. Use &quot;PUT&quot; if you want to change the whole resource, or &quot;PATCH&quot; if you want to change just one part of a resource. | &quot;DELETE&quot;: Exactly how it sounds, deletes a resource from the API | . Popcorn Hacks: . What method should I use if I want to display some of the data stored in the backend?GET . | What method would I use if something in the data is misspelled and I want to fix it real quick?PATCH . | What method should I use if I want to add a new entry to the data?POST . | . Filtering Data . If we want to display API data, we are going to have to filter what we want to display for multiple reasons These include making sure that the user only sees information they need to see, and not anything else | Also we need to present the information in a readable format instead of just seeing the raw data | . | . The below code segment, is from a previous project. It shows the use of a url being fetched, and the JavaScript fetch() command being implemented. . // prepare fetch urls // const url = &quot;https://ssjn.nighthawkcodescrums.gq/api/song&quot;; const url = &quot;https://ssjncpt.duckdns.org/api/song&quot;; const sad_url = url + &quot;/sad/&quot;; // sad category const happy_url = url + &quot;/happy/&quot;; // happy category const rage_url = url + &quot;/rage/&quot;; // rage category const indian_url = url + &quot;/indian/&quot;; // indian category // prepare fetch GET options const options = { method: &#39;GET&#39;, // *GET, POST, PUT, DELETE, etc. mode: &#39;cors&#39;, // cors, *cors, same-origin cache: &#39;default&#39;, // *default, no-cache, reload, force-cache, only-if-cached credentials: &#39;omit&#39;, // include, *same-origin, omit headers: { &#39;Content-Type&#39;: &#39;application/json&#39; // &#39;Content-Type&#39;: &#39;application/x-www-form-urlencoded&#39;, }, }; // prepare fetch PUT options, clones with JS Spread Operator (...) const put_options = {...options, method: &#39;PUT&#39;}; // clones and replaces method // fetch the API fetch(url, options) // response is a RESTful &quot;promise&quot; on any successful fetch .then(response =&gt; { // check for response errors if (response.status !== 200) { error(&#39;GET API response failure: &#39; + response.status); return; } // valid response will have JSON data }) . Third Party APIs . APIs provided by other developers for public use. . | Programmers can use the content of these APIs to create new functionalities for their programs, or they can also simply take advantage of the data of the API for different uses. . Ex: A developed can use Google Account login to allow users to log in with their google account . | Ex: Using the content of a weather API to make a weather app . | . | The functionalities of these APIs are usually accessed via JavaScript (usually) as you’ve seen before in your past projects. . | 3rd party APIs are located on third party servers. To access them from JavaScript you first need to connect to the API functionality and make it available on your page. . | . &lt;script src=&quot;https://api.mqcdn.com/sdk/mapquest-js/v1.3.2/mapquest.js&quot; defer&gt;&lt;/script&gt; &lt;link rel=&quot;stylesheet&quot; href=&quot;https://api.mqcdn.com/sdk/mapquest-js/v1.3.2/mapquest.css&quot; /&gt; . Here is an example of accessing the objects available in the library above. | . const map = L.mapquest.map(&#39;map&#39;, { center: [53.480759, -2.242631], layers: L.mapquest.tileLayer(&#39;map&#39;), zoom: 12 }); . The process of accessing and using third-party APIs can vary depending on the specific API and the requirements set by the API provider. 3rd party APIs use developer keys to allow developers access to the API functionality, which protects the owner of the API. | . L.mapquest.key = &#39;YOUR-API-KEY-HERE&#39;; . Developers must apply to get the key of a certain API, and then include it in their code to be allowed access to the API&#39;s functionality. Some API keys are accessed slightly differently, but the method is similar for the most part. | . Put the link of a 3rd party API you have or will use below? . Pandas . While 3rd party APIs give you access to a plethora of data you may have not been able to include using a completely new self-made database, pandas can help you organize and utlize this data. . Pandas is an open-source library that allows for the manipulation and analysis of numerical data, which is vital in real-life applications. . We have used this in the song recommendation program we are currently developing. The use of pandas allows us to take the csv file we obtained from a third party and display it in a format we can manipulate and analyze. . import os import pandas as pd from flask import render_template @app.route(&#39;/songdata&#39;) def songdata(): # Path to the CSV file csv_path = os.path.join(app.static_folder, &#39;songdata.csv&#39;) # Read the CSV file into a pandas dataframe df = pd.read_csv(csv_path) # Render the dataframe as an HTML table using Jinja2 return render_template(&#39;songdata.html&#39;, table=df.to_html(index=False)) . This is how the dataframe will appear on our flask: . . Python (Request) Fetch . Example with Weather API . What method is being used in these cells?GET . | . import requests url = &quot;https://yahoo-weather5.p.rapidapi.com/weather&quot; querystring = {&quot;location&quot;:&quot;San Diego&quot;,&quot;format&quot;:&quot;json&quot;,&quot;u&quot;:&quot;f&quot;} headers = { &quot;X-RapidAPI-Key&quot;: &quot;4abcb54450msh7468dfd72294e89p18fbaajsn6d4200063b39&quot;, &quot;X-RapidAPI-Host&quot;: &quot;yahoo-weather5.p.rapidapi.com&quot; } response = requests.request(&quot;GET&quot;, url, headers=headers, params=querystring) print(response.json()) . {&#39;location&#39;: {&#39;city&#39;: &#39;San Diego&#39;, &#39;woeid&#39;: 2487889, &#39;country&#39;: &#39;United States&#39;, &#39;lat&#39;: 32.831699, &#39;long&#39;: -117.122002, &#39;timezone_id&#39;: &#39;America/Los_Angeles&#39;}, &#39;current_observation&#39;: {&#39;pubDate&#39;: 1682463385, &#39;wind&#39;: {&#39;chill&#39;: 64, &#39;direction&#39;: &#39;WSW&#39;, &#39;speed&#39;: 9}, &#39;atmosphere&#39;: {&#39;humidity&#39;: 65, &#39;visibility&#39;: 10, &#39;pressure&#39;: 1012.5}, &#39;astronomy&#39;: {&#39;sunrise&#39;: &#39;6:08 AM&#39;, &#39;sunset&#39;: &#39;7:26 PM&#39;}, &#39;condition&#39;: {&#39;temperature&#39;: 65, &#39;text&#39;: &#39;Mostly Cloudy&#39;, &#39;code&#39;: 28}}, &#39;forecasts&#39;: [{&#39;day&#39;: &#39;Tue&#39;, &#39;date&#39;: 1682438400, &#39;high&#39;: 67, &#39;low&#39;: 55, &#39;text&#39;: &#39;Mostly Clear&#39;, &#39;code&#39;: 33}, {&#39;day&#39;: &#39;Wed&#39;, &#39;date&#39;: 1682524800, &#39;high&#39;: 73, &#39;low&#39;: 56, &#39;text&#39;: &#39;Partly Cloudy&#39;, &#39;code&#39;: 30}, {&#39;day&#39;: &#39;Thu&#39;, &#39;date&#39;: 1682611200, &#39;high&#39;: 76, &#39;low&#39;: 57, &#39;text&#39;: &#39;Mostly Sunny&#39;, &#39;code&#39;: 34}, {&#39;day&#39;: &#39;Fri&#39;, &#39;date&#39;: 1682697600, &#39;high&#39;: 76, &#39;low&#39;: 58, &#39;text&#39;: &#39;Mostly Sunny&#39;, &#39;code&#39;: 34}, {&#39;day&#39;: &#39;Sat&#39;, &#39;date&#39;: 1682784000, &#39;high&#39;: 77, &#39;low&#39;: 59, &#39;text&#39;: &#39;Partly Cloudy&#39;, &#39;code&#39;: 30}, {&#39;day&#39;: &#39;Sun&#39;, &#39;date&#39;: 1682870400, &#39;high&#39;: 75, &#39;low&#39;: 59, &#39;text&#39;: &#39;Partly Cloudy&#39;, &#39;code&#39;: 30}, {&#39;day&#39;: &#39;Mon&#39;, &#39;date&#39;: 1682956800, &#39;high&#39;: 64, &#39;low&#39;: 54, &#39;text&#39;: &#39;Cloudy&#39;, &#39;code&#39;: 26}, {&#39;day&#39;: &#39;Tue&#39;, &#39;date&#39;: 1683043200, &#39;high&#39;: 62, &#39;low&#39;: 52, &#39;text&#39;: &#39;Mostly Cloudy&#39;, &#39;code&#39;: 28}, {&#39;day&#39;: &#39;Wed&#39;, &#39;date&#39;: 1683129600, &#39;high&#39;: 60, &#39;low&#39;: 53, &#39;text&#39;: &#39;Partly Cloudy&#39;, &#39;code&#39;: 30}, {&#39;day&#39;: &#39;Thu&#39;, &#39;date&#39;: 1683216000, &#39;high&#39;: 62, &#39;low&#39;: 51, &#39;text&#39;: &#39;Partly Cloudy&#39;, &#39;code&#39;: 30}, {&#39;day&#39;: &#39;Fri&#39;, &#39;date&#39;: 1683302400, &#39;high&#39;: 63, &#39;low&#39;: 53, &#39;text&#39;: &#39;Mostly Cloudy&#39;, &#39;code&#39;: 28}]} . The fetch worked and we can see all the data, but this is presented in a way that is not very readable. It also has a lot of information we didn&#39;t see. Let&#39;s say I just want to see the projected weather forecasts. . import requests url = &quot;https://yahoo-weather5.p.rapidapi.com/weather&quot; querystring = {&quot;location&quot;:&quot;San Diego&quot;,&quot;format&quot;:&quot;json&quot;,&quot;u&quot;:&quot;f&quot;} headers = { &quot;X-RapidAPI-Key&quot;: &quot;4abcb54450msh7468dfd72294e89p18fbaajsn6d4200063b39&quot;, &quot;X-RapidAPI-Host&quot;: &quot;yahoo-weather5.p.rapidapi.com&quot; } response = requests.request(&quot;GET&quot;, url, headers=headers, params=querystring) print(&quot;San Diego Weather Forecast:&quot; + &quot; n&quot;) forecast = response.json().get(&quot;forecasts&quot;) i = 0 while i &lt; len(forecast): for key, value in forecast[i].items(): print(&quot; t&quot; + key, value) i += 1 print(&quot; n&quot;) . San Diego Weather Forecast: day Tue date 1682438400 high 67 low 55 text Mostly Clear code 33 day Wed date 1682524800 high 73 low 56 text Partly Cloudy code 30 day Thu date 1682611200 high 76 low 57 text Mostly Sunny code 34 day Fri date 1682697600 high 76 low 58 text Mostly Sunny code 34 day Sat date 1682784000 high 77 low 59 text Partly Cloudy code 30 day Sun date 1682870400 high 75 low 59 text Partly Cloudy code 30 day Mon date 1682956800 high 64 low 54 text Cloudy code 26 day Tue date 1683043200 high 62 low 52 text Mostly Cloudy code 28 day Wed date 1683129600 high 60 low 53 text Partly Cloudy code 30 day Thu date 1683216000 high 62 low 51 text Partly Cloudy code 30 day Fri date 1683302400 high 63 low 53 text Mostly Cloudy code 28 . As we can see, we now can see the data in a much more organized and readable format, and we only see the forecasts, which is what we wanted to see . Hacks and Point Division . Popcorn questions answered within lesson (.2) | Screenshot showing proof that conda is installed (.1) | . Done as pair hacks (Nathan Capule &amp; Azeem Khan) . Create 3 quiz questions to demonstrate the main steps in creating a repository on Github (.1) | . What is the first step to creating a repository on Github? A. Clone an existing repository B. Fork an existing repository C. Create a new repository D. Pull changes from a remote repository Answer: C. Create a new repository What&#39;s the first step in making a Pull Request? A. Giving the repository a name B. Git Cloning the repository C. Choosing a license for the repository D. Forking the repository Answer: D. Forking the repository What is the purpose of a README.md file in a Github repository? A. To store important data in the repository B. To provide a brief introduction to the repository and its contents C. To track changes made to the repository over time D. To hold images and other media used in the repository Answer: B. To provide a brief introduction to the repository and its contents . Fetch from a third party API, and display json data. Then use the json data in any simple JavaScript function (hint: parse, this makes json data into a JavaScript object) (.4) | here&#39;s a link: https://azeem-khan1.github.io/FE-BE-Hacks/ + source code In your code, comment on how you implemented a 3rd party API. Reflect on how using the 3rd party API helped. Using the third-party car API in my code allows me to fetch data about cars from a remote server and use that data in my web app | . | . | Pull request successful completion: (.1) | . Extra: Use fetch() and display data from an API, self-made or third party (.1) . https://azeem-khan1.github.io/FE-BE-Hacks/ . # Trying in python... import requests url = &quot;https://car-data.p.rapidapi.com/cars&quot; querystring = {&quot;limit&quot;:&quot;10&quot;,&quot;page&quot;:&quot;0&quot;} headers = { &quot;content-type&quot;: &quot;application/octet-stream&quot;, &quot;X-RapidAPI-Key&quot;: &quot;7dc092b8d8mshcbfaccb5c82b9eap1fe7fdjsna2cb1a33dcb0&quot;, &quot;X-RapidAPI-Host&quot;: &quot;car-data.p.rapidapi.com&quot; } response = requests.get(url, headers=headers, params=querystring) print(response.json()) . [{&#39;id&#39;: 9582, &#39;year&#39;: 2008, &#39;make&#39;: &#39;Buick&#39;, &#39;model&#39;: &#39;Enclave&#39;, &#39;type&#39;: &#39;SUV&#39;}, {&#39;id&#39;: 9583, &#39;year&#39;: 2006, &#39;make&#39;: &#39;MINI&#39;, &#39;model&#39;: &#39;Convertible&#39;, &#39;type&#39;: &#39;Convertible&#39;}, {&#39;id&#39;: 9584, &#39;year&#39;: 2019, &#39;make&#39;: &#39;Volvo&#39;, &#39;model&#39;: &#39;XC90&#39;, &#39;type&#39;: &#39;SUV&#39;}, {&#39;id&#39;: 9585, &#39;year&#39;: 1999, &#39;make&#39;: &#39;Ford&#39;, &#39;model&#39;: &#39;Taurus&#39;, &#39;type&#39;: &#39;Sedan, Wagon&#39;}, {&#39;id&#39;: 9586, &#39;year&#39;: 2020, &#39;make&#39;: &#39;Volvo&#39;, &#39;model&#39;: &#39;XC60&#39;, &#39;type&#39;: &#39;SUV&#39;}, {&#39;id&#39;: 9587, &#39;year&#39;: 2006, &#39;make&#39;: &#39;HUMMER&#39;, &#39;model&#39;: &#39;H2&#39;, &#39;type&#39;: &#39;SUV, Pickup&#39;}, {&#39;id&#39;: 9588, &#39;year&#39;: 2016, &#39;make&#39;: &#39;GMC&#39;, &#39;model&#39;: &#39;Sierra 1500 Crew Cab&#39;, &#39;type&#39;: &#39;Pickup&#39;}, {&#39;id&#39;: 9589, &#39;year&#39;: 2008, &#39;make&#39;: &#39;GMC&#39;, &#39;model&#39;: &#39;Canyon Crew Cab&#39;, &#39;type&#39;: &#39;Pickup&#39;}, {&#39;id&#39;: 9590, &#39;year&#39;: 2016, &#39;make&#39;: &#39;Subaru&#39;, &#39;model&#39;: &#39;Outback&#39;, &#39;type&#39;: &#39;SUV&#39;}, {&#39;id&#39;: 9591, &#39;year&#39;: 2010, &#39;make&#39;: &#39;Mitsubishi&#39;, &#39;model&#39;: &#39;Outlander&#39;, &#39;type&#39;: &#39;SUV&#39;}] .",
            "url": "https://jiya-sav.github.io/ourshiny/fastpages/jupyter/2023/04/26/AzeemKhan-P3M-FE&BE.html",
            "relUrl": "/fastpages/jupyter/2023/04/26/AzeemKhan-P3M-FE&BE.html",
            "date": " • Apr 26, 2023"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About",
          "content": "This site is built with fastpages . Key Links jiya . GitHub Repos: github.com/nighthawkcoders | AWS Deployments: csp.nighthawkcodingsociety.com | Slack: Join Link | 2021-2022 Archives: Fall, Early Winter, Late Winter, Spring | . .",
          "url": "https://jiya-sav.github.io/ourshiny/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  

  

  
  

  
  

  
  

  
  

  
  

  
  

  
      ,"page11": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://jiya-sav.github.io/ourshiny/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}